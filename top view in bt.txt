/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Pair{
    int hd;
    TreeNode node;
    public Pair(TreeNode node,int hd){
        this.hd=hd;
        this.node=node;
    }
}
class Solution {
    public ArrayList<Integer> rightSideView(TreeNode root) {
        ArrayList<Integer> ans=new ArrayList<Integer>();
        if(root==null)
            return ans;
        Map<Integer,Integer> map=new TreeMap<>();
        Queue<Pair> queue=new LinkedList<Pair>();
        queue.add(new Pair(root,0));
        while(!queue.isEmpty()){
            Pair it=queue.remove();
            int hd=it.hd;
            TreeNode node=it.node;
            if(map.get(hd)==null)
                map.put(hd,node.val);
            if(node.left!=null)
                queue.add(new Pair(node.left,hd-1));
            if(node.right!=null)
                queue.add(new Pair(node.right,hd+1));
            
        }
        for(Map.Entry<Integer,Integer> entry : map.entrySet()){
            ans.add(entry.getValue());
        }
        return ans;
    }
}
